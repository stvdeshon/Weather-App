{"version":3,"file":"main.js","mappings":"MACA,SAASA,GAA0B,KACjCC,EACAC,MAAM,KAAEC,EAAI,WAAEC,EAAU,SAAEC,GAC1BC,UAAU,KAAEJ,IACZK,MAAM,MAAEC,KAERC,SAASC,cAAc,qBAAqBC,YAAc,GAAGV,IAC7DQ,SAASC,cAAc,cAAcC,YAAc,GAAGT,IACtDO,SAASC,cAAc,SAASC,YAAc,gBAAgBR,IAC9DM,SAASC,cACP,eACAC,YAAc,eAAeP,IAC/BK,SAASC,cAAc,aAAaC,YAAc,aAAaN,IAC/DI,SAASC,cAAc,SAASC,YAAc,SAASH,OACzD,CAaAI,OAAOC,iBAAiB,QAXxBC,iBACE,MACMC,QAAiBC,MACrB,mHACA,CAAEC,KAAM,SAEJC,QAAoBH,EAASI,OACnCnB,EAA0BkB,GAC1BE,EAAgBF,GAChBG,QAAQC,IAAIJ,EACd,IAGA,MAAMK,EAASd,SAASC,cAAc,SAkBtCI,eAAeM,GAAkBI,OAAO,IAAEC,EAAG,IAAEC,KAC7C,MAAMX,QAAiBC,MACrB,wDAAwDS,SAAWC,0DACnE,CAAET,KAAM,SAEJU,QAAaZ,EAASI,OAC5B,IAAIS,EAAe,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKG,KAAKC,OAAQF,IAC3B,GAALA,GAAe,IAALA,GAAgB,IAALA,GAAgB,IAALA,GAAgB,IAALA,GAC7CD,EAAaI,KAAKL,EAAKG,KAAKD,KAMlC,SAAyBI,GACvB,MAAMC,EAAQD,EAAM,GACLA,EAAM,GACPA,EAAM,GACLA,EAAM,GACPA,EAAM,GACpBZ,QAAQC,IAAIa,EAAQD,EAAME,SAE1BH,EAAMI,SAASC,IACb7B,SAASC,cACP,sBACA6B,WAAa,8CACEJ,EAAQG,EAAMF,yCACRE,EAAMhC,QAAQ,GAAGJ,iCACtBoC,EAAMpC,KAAKC,uCACLmC,EAAMpC,KAAKE,2CACbkC,EAAMpC,KAAKG,qCACfiC,EAAM/B,KAAKC,qBACxB,GAET,CAvBEgC,CAAgBZ,EAClB,CAwBA,SAASO,EAAQM,GACf,MAAMC,EAAgBD,EAAIE,MAAM,KAAK,GACrC,IAAIC,EAAI,IAAIC,KAAK,GAAGH,KAAiBI,eAAeH,MAAM,KAC1D,OAAQI,KAAOH,EAAE,GAAK,KAAOA,EAAE,GAAK,IAAMA,EAAE,EAC9C,CA1DArB,EAAOV,iBAAiB,YAAYC,MAAOkC,IACzC,GAAc,UAAVA,EAAEC,IAAiB,CACrB,IACE,MAAMlC,QAAiBC,MACrB,qDAAqDgC,EAAEE,OAAOC,8DAC9D,CAAElC,KAAM,SAEJmC,QAAiBrC,EAASI,OAChCnB,EAA0BoD,GAC1BhC,EAAgBgC,EAGlB,CAFE,MAAOC,GACP,OAAO,IACT,CACA9B,EAAO4B,MAAQ,EACjB,I","sources":["webpack://weather-app/./src/index.js"],"sourcesContent":["//extracts the data I want from the API object\nfunction destructureCurrentWeather({\n  name,\n  main: { temp, feels_like, humidity },\n  weather: [{ main }],\n  wind: { speed },\n}) {\n  document.querySelector(\"#current-location\").textContent = `${name}`;\n  document.querySelector(\"#condition\").textContent = `${main}`;\n  document.querySelector(\"#temp\").textContent = `Temperature: ${temp}`;\n  document.querySelector(\n    \"#feels-like\"\n  ).textContent = `Feels like: ${feels_like}`;\n  document.querySelector(\"#humidity\").textContent = `Humidity: ${humidity}`;\n  document.querySelector(\"#wind\").textContent = `Wind: ${speed} MPH`;\n}\n\nasync function defaultCurrentWeather() {\n  const defaultCity = \"New York\";\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${defaultCity}&units=imperial&APPID=d53b7a1b0831587e43e406c3f5532905`,\n    { mode: \"cors\" }\n  );\n  const weatherData = await response.json();\n  destructureCurrentWeather(weatherData);\n  fiveDayForecast(weatherData);\n  console.log(weatherData);\n}\nwindow.addEventListener(\"load\", defaultCurrentWeather);\n\nconst search = document.querySelector(\"input\");\nsearch.addEventListener(\"keypress\", async (e) => {\n  if (e.key === \"Enter\") {\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${e.target.value}&units=imperial&APPID=d53b7a1b0831587e43e406c3f5532905`,\n        { mode: \"cors\" }\n      );\n      const location = await response.json();\n      destructureCurrentWeather(location);\n      fiveDayForecast(location);\n    } catch (err) {\n      return null;\n    }\n    search.value = \"\";\n  }\n});\n\nasync function fiveDayForecast({ coord: { lat, lon } }) {\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=imperial&appid=d53b7a1b0831587e43e406c3f5532905`,\n    { mode: \"cors\" }\n  );\n  const data = await response.json();\n  let fiveDayArray = [];\n  for (let i = 0; i < data.list.length; i++) {\n    if (i == 4 || i == 12 || i == 20 || i == 28 || i == 36) {\n      fiveDayArray.push(data.list[i]);\n    }\n  }\n  displayForecast(fiveDayArray);\n}\n\nfunction displayForecast(array) {\n  const first = array[0];\n  const second = array[1];\n  const third = array[2];\n  const fourth = array[3];\n  const fifth = array[4];\n  console.log(dateSet(first.dt_txt));\n\n  array.forEach((entry) => {\n    document.querySelector(\n      \"#weather-container\"\n    ).innerHTML += `<div class=\"forecast\">\n    <p class=\"day\">${dateSet(entry.dt_txt)}</p>\n    <p class=\"condition\">${entry.weather[0].main}</p>\n    <p class=\"temp\">${entry.main.temp}</p>\n    <p class=\"feels-like\">${entry.main.feels_like}</p>\n    <p class=\"humidity\">${entry.main.humidity}</p>\n    <p class=\"wind\">${entry.wind.speed}</p>\n  </div>`;\n  });\n}\n\nfunction dateSet(val) {\n  const formattedDate = val.split(\" \")[0];\n  let d = new Date(`${formattedDate}`).toDateString().split(\" \");\n  return (date = d[0] + \", \" + d[1] + \" \" + d[2]);\n}\n"],"names":["destructureCurrentWeather","name","main","temp","feels_like","humidity","weather","wind","speed","document","querySelector","textContent","window","addEventListener","async","response","fetch","mode","weatherData","json","fiveDayForecast","console","log","search","coord","lat","lon","data","fiveDayArray","i","list","length","push","array","first","dateSet","dt_txt","forEach","entry","innerHTML","displayForecast","val","formattedDate","split","d","Date","toDateString","date","e","key","target","value","location","err"],"sourceRoot":""}